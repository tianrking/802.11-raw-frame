#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "esp_log.h"

#define WIFI_CHANNEL 1
#define PACKET_SIZE 100
#define TAG "RAW_TX"

static void wifi_init()
{
    tcpip_adapter_init();
    ESP_ERROR_CHECK(esp_event_loop_init(NULL, NULL));
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_start());
}

static void raw_tx_task(void *pvParameter)
{
    uint8_t *raw_buf = (uint8_t *)pvParameter;
    int packet_count = 0;
    
    uint8_t mac[6];
    ESP_ERROR_CHECK(esp_wifi_get_mac(WIFI_IF_STA, mac));
    ESP_LOGI(TAG, "ESP8266 station MAC address: %02x:%02x:%02x:%02x:%02x:%02x",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);


    while (1) {
        memset(raw_buf, 0xAA, PACKET_SIZE);
        ESP_ERROR_CHECK(esp_wifi_80211_tx(WIFI_IF_STA, raw_buf, PACKET_SIZE, false));
        packet_count++;
        ESP_LOGI(TAG, "Sent packet %d", packet_count);
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}

void app_main()
{
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    wifi_init();

    uint8_t *raw_buf = (uint8_t *)malloc(PACKET_SIZE);
    if (!raw_buf) {
        ESP_LOGE(TAG, "Cannot allocate buffer");
        return;
    }

    xTaskCreate(&raw_tx_task, "raw_tx_task", 2048, raw_buf, 5, NULL);
}